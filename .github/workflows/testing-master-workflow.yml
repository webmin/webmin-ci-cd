name: Testing Master Workflow

on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
        description: 'Type of build: package or module'
      project-name:
        required: true
        type: string
        description: 'Name of the project to build (e.g. webmin, usermin, virtualmin-nginx)'
      package-type:
        required: false
        type: string
        default: ''
        description: 'Specific package type if not using project name (e.g. for authentic-theme)'

jobs:
  build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[no-build]')"
    steps:
      - uses: actions/checkout@v3
      
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with: 
          packages: git tar gzip openssl curl openssh-client rpm perl libjson-pp-perl libdigest-sha-perl liblist-moreutils-perl libencode-detect-perl zstd
          version: 1.0
      
      - uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Nicosia"
      
      - name: Fetch dependencies
        run: |-
          curl -O https://raw.githubusercontent.com/webmin/webmin-ci-cd/main/build/bootstrap.bash
      
      - name: Build and upload
        run: |-
          export CLOUD__GPG_PH=${{ secrets.DEV_GPG_PH }}
          export CLOUD__IP_ADDR=${{ secrets.DEV_IP_ADDR }}
          export CLOUD__UPLOAD_SSH_USER=${{ secrets.DEV_UPLOAD_SSH_USER }}
          export CLOUD__UPLOAD_SSH_DIR=${{ secrets.DEV_UPLOAD_SSH_DIR }}
          export CLOUD__SSH_PRV_KEY=${{ secrets.DEV_SSH_PRV_KEY }}
          export CLOUD__GH_TOKEN=${{ secrets.GITHUB_TOKEN }}

          bash bootstrap.bash
          if [ "${{ inputs.build-type }}" = "package" ]; then
            if [ -n "${{ inputs.package-type }}" ]; then
              bash build-deb-package.bash ${{ inputs.package-type }} --testing --verbose
              bash build-rpm-package.bash ${{ inputs.package-type }} --testing --verbose
            else
              bash build-deb-package.bash ${{ inputs.project-name }} --testing --verbose
              bash build-rpm-package.bash ${{ inputs.project-name }} --testing --verbose
            fi
          else
            bash build-deb-module.bash ${{ inputs.project-name }} --testing --verbose
            bash build-rpm-module.bash ${{ inputs.project-name }} --testing --verbose
          fi